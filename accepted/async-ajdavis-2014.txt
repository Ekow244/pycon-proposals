Title: What Is Async, How Does It Work, And When Should I Use It?

Category: Web Frameworks

Duration: 30 minutes

Description:

If your talk is accepted this will be made public and printed in the program.
Should be one paragraph, maximum 400 characters.

Python’s asynchronous frameworks, like asyncio, Tornado, and Twisted, are
increasingly important for writing high-performance web applications. Even if
you’re an experienced web programmer, you may lack a rigorous understanding of
how these frameworks work and when to use them. Let’s see how asyncio’s event
loop works, and learn how to efficiently handle very large numbers of
concurrent connections.

Audience:

Who is the intended audience for your talk? (Be specific; "Python programmers"
is not a good answer to this question.)

Web developers building high-performance applications.

Level: Intermediate

Objectives:

What will attendees get out of your talk? When they leave the room, what will
they know that they didn't know before?

Attendees will learn when to use async and when not to. They’ll learn about
asyncio, a major new feature in the Python 3.4 standard library: what it is,
how it works, and how to use it for high-concurrency web programming.

Abstract:

Detailed description. Will be made public if your talk is accepted.

I. Why Async?

A. First, There Was Multithreading: Traditional web servers use a thread per
connection to store state.

B. Trends: Contemporary web applications trend towards using web sockets and
service-oriented architectures, which require very high numbers of concurrent
connections.

C. Limitations of Multithreading: Per-thread overhead limits the number of
connections possible. We need a more efficient way to store state.

II. What Is Async?

A. Single-threaded: Asynchronous frameworks support high concurrency, typically
with a single thread.

B. Event-driven: Async frameworks use non-blocking sockets, and register for
notifications on them using EPoll, Kqueue, or similar.

C. State: The techniques used to store state—coroutines, callbacks,
Deferreds—are more memory-efficient than threads but unfamiliar to most
programmers.

III. How Does Async Work?

A. Frameworks: There are a number of asynchronous frameworks available for
Python. The most popular are Tornado and Twisted. Last year Guido led
development on an async framework for Python’s standard library, codenamed
Tulip. Most of Tulip is now in the Python standard library’s “asyncio” package.

B. Finally, Some Code: Look at a chat server written in the multithreaded style
with Flask, versus an async server that uses asyncio. The multithreaded code
implicitly stores its per-connection state in each thread’s stack, stack
pointer, and program counter. In asyncio those concepts map to generators,
references to generators, and generators’ instruction pointers.

C. The asyncio Event Loop: A stroll through the code for asyncio’s event loop.
asyncio uses non-blocking sockets and Epoll / Kqueue to perform concurrent
operations in a single thread.

D. The Worst Sin: Any synchronous code in an async app blocks the event loop
and makes the application crawl. When you grasp why, you’re way ahead of most
programmers using Python async frameworks.

IV. When Should I Use It?

A. Indications: High connection counts, server-side events pushed to clients,
leisure to code against a more challenging API.

B. Contraindications: Reliance on synchronous third-party libraries, relaxed
performance requirements.

Outline:

5 minutes: Storing state. Web applications typically receive client requests,
do some I/O with a back end, like a database or API server, and finally respond
to the client. The app must store state while waiting for the backend. In the
case of websockets, the app waits arbitrarily long for a server-side event
before responding to the client.

If the server uses threads to store that state, the programming model is easy
to understand but has high costs per connection. The recent history of web
development has trended towards higher connection counts, and larger amounts of
per-connection state that applications must store.

Async frameworks use various techniques to store state without threads: asyncio
uses coroutines, Tornado uses callbacks, and Twisted uses Deferreds. These
techniques minimize resources per connection, but they’re unfamiliar.

5 minutes: Look at an example chat server written in 20 lines using Flask.
Compare to the same application with asyncio. Note that since Flask uses a
thread per connection, state is stored implicitly in language facilities like
the stack, the stack pointer, and the program counter. Describe how these
concepts map to the asyncio example.

10 minutes: A structured tour of the asyncio event loop. We start at the APIs
used by the example chat application: loop.start_serving() and
loop.run_forever(). Examine their code (greatly simplified to be easy to read
on slides). start_serving() sets a socket to be non-blocking, and adds its file
descriptor to a list of descriptors on which it’s waiting for events. It waits
using Kqueue or Epoll or some other platform-specific event service.
run_forever() begins the event loop itself. Explore the event loop’s basic
logic, and see how it supports concurrent operations in a single thread.

3 minutes: Look at bad example code that mixes synchronous operations with
asyncio. Based on our understanding of asyncio, we know that this has awful
consequences: it blocks the event loop. With relief, see how to fix the bad
example.

4 minutes: When to use async. Good for apps with high connection counts,
especially in service-oriented architectures, or if server events are pushed to
the client over WebSockets. Takes time to learn, longer to code, harder to
debug. Async is a poor choice if you rely on synchronous third-party libraries
like database drivers,

3 minutes: Q & A. Questions may include:

* Compare Python’s async frameworks with each other and with NodeJS.

* What is the benefit of asyncio being included in the standard library?

* What is asyncio’s future?

* How can async applications integrate with synchronous third-party libraries
  like database drivers?

Notes:

Anything else you'd like the program committee to know when making their
selection: your past speaking experience, open source community experience,
etc.

I’ve comfortably given a version of this talk, focusing on Tornado instead of
asyncio, in 40 minutes at Open Source Bridge in June 2013. To fit in 30
minutes, I’ll reduce Q & A from 10 minutes to 3, simplify my example program,
omit a discussion of memory- versus CPU-bound web services, and spend almost no
time comparing asyncio to other frameworks during the talk.

I’m a committer to the asyncio project and the author of its Queue
implementation.
